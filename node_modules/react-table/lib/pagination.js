'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// import _ from './utils'

var defaultButton = function defaultButton(props) {
  return _react2.default.createElement(
    'button',
    _extends({ type: 'button' }, props, { className: '-btn' }),
    props.children
  );
};

exports.default = _react2.default.createClass({
  displayName: 'pagination',
  getInitialState: function getInitialState() {
    return {
      page: this.props.page
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.setState({ page: nextProps.page });
  },
  getSafePage: function getSafePage(page) {
    if (isNaN(page)) {
      page = this.props.page;
    }
    return Math.min(Math.max(page, 0), this.props.pages - 1);
  },
  changePage: function changePage(page) {
    page = this.getSafePage(page);
    this.setState({ page: page });
    if (this.props.page !== page) {
      this.props.onPageChange(page);
    }
  },
  applyPage: function applyPage(e) {
    e && e.preventDefault();
    var page = this.state.page;
    this.changePage(page === '' ? this.props.page : page);
  },
  render: function render() {
    var _this = this;

    var _props = this.props,
        pages = _props.pages,
        page = _props.page,
        showPageSizeOptions = _props.showPageSizeOptions,
        pageSizeOptions = _props.pageSizeOptions,
        pageSize = _props.pageSize,
        showPageJump = _props.showPageJump,
        canPrevious = _props.canPrevious,
        canNext = _props.canNext,
        onPageSizeChange = _props.onPageSizeChange,
        className = _props.className,
        _props$PreviousCompon = _props.PreviousComponent,
        PreviousComponent = _props$PreviousCompon === undefined ? defaultButton : _props$PreviousCompon,
        _props$NextComponent = _props.NextComponent,
        NextComponent = _props$NextComponent === undefined ? defaultButton : _props$NextComponent;


    return _react2.default.createElement(
      'div',
      {
        className: (0, _classnames2.default)(className, '-pagination'),
        style: this.props.paginationStyle
      },
      _react2.default.createElement(
        'div',
        { className: '-previous' },
        _react2.default.createElement(
          PreviousComponent,
          {
            onClick: function onClick(e) {
              if (!canPrevious) return;
              _this.changePage(page - 1);
            },
            disabled: !canPrevious
          },
          this.props.previousText
        )
      ),
      _react2.default.createElement(
        'div',
        { className: '-center' },
        _react2.default.createElement(
          'span',
          { className: '-pageInfo' },
          this.props.pageText,
          ' ',
          showPageJump ? _react2.default.createElement(
            'div',
            { className: '-pageJump' },
            _react2.default.createElement('input', {
              type: this.state.page === '' ? 'text' : 'number',
              onChange: function onChange(e) {
                var val = e.target.value;
                var page = val - 1;
                if (val === '') {
                  return _this.setState({ page: val });
                }
                _this.setState({ page: _this.getSafePage(page) });
              },
              value: this.state.page === '' ? '' : this.state.page + 1,
              onBlur: this.applyPage,
              onKeyPress: function onKeyPress(e) {
                if (e.which === 13 || e.keyCode === 13) {
                  _this.applyPage();
                }
              }
            })
          ) : _react2.default.createElement(
            'span',
            { className: '-currentPage' },
            page + 1
          ),
          ' ',
          this.props.ofText,
          ' ',
          _react2.default.createElement(
            'span',
            { className: '-totalPages' },
            pages
          )
        ),
        showPageSizeOptions && _react2.default.createElement(
          'span',
          { className: 'select-wrap -pageSizeOptions' },
          _react2.default.createElement(
            'select',
            {
              onChange: function onChange(e) {
                return onPageSizeChange(Number(e.target.value));
              },
              value: pageSize
            },
            pageSizeOptions.map(function (option, i) {
              return _react2.default.createElement(
                'option',
                {
                  key: i,
                  value: option },
                option,
                ' ',
                _this.props.rowsText
              );
            })
          )
        )
      ),
      _react2.default.createElement(
        'div',
        { className: '-next' },
        _react2.default.createElement(
          NextComponent,
          {
            onClick: function onClick(e) {
              if (!canNext) return;
              _this.changePage(page + 1);
            },
            disabled: !canNext
          },
          this.props.nextText
        )
      )
    );
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYWdpbmF0aW9uLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRCdXR0b24iLCJwcm9wcyIsImNoaWxkcmVuIiwiY3JlYXRlQ2xhc3MiLCJnZXRJbml0aWFsU3RhdGUiLCJwYWdlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwiZ2V0U2FmZVBhZ2UiLCJpc05hTiIsIk1hdGgiLCJtaW4iLCJtYXgiLCJwYWdlcyIsImNoYW5nZVBhZ2UiLCJvblBhZ2VDaGFuZ2UiLCJhcHBseVBhZ2UiLCJlIiwicHJldmVudERlZmF1bHQiLCJzdGF0ZSIsInJlbmRlciIsInNob3dQYWdlU2l6ZU9wdGlvbnMiLCJwYWdlU2l6ZU9wdGlvbnMiLCJwYWdlU2l6ZSIsInNob3dQYWdlSnVtcCIsImNhblByZXZpb3VzIiwiY2FuTmV4dCIsIm9uUGFnZVNpemVDaGFuZ2UiLCJjbGFzc05hbWUiLCJQcmV2aW91c0NvbXBvbmVudCIsIk5leHRDb21wb25lbnQiLCJwYWdpbmF0aW9uU3R5bGUiLCJwcmV2aW91c1RleHQiLCJwYWdlVGV4dCIsInZhbCIsInRhcmdldCIsInZhbHVlIiwid2hpY2giLCJrZXlDb2RlIiwib2ZUZXh0IiwiTnVtYmVyIiwibWFwIiwib3B0aW9uIiwiaSIsInJvd3NUZXh0IiwibmV4dFRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBQ0E7QUFDQTs7QUFFQSxJQUFNQSxnQkFBZ0IsU0FBaEJBLGFBQWdCLENBQUNDLEtBQUQ7QUFBQSxTQUNwQjtBQUFBO0FBQUEsZUFBUSxNQUFLLFFBQWIsSUFBMEJBLEtBQTFCLElBQWlDLFdBQVUsTUFBM0M7QUFBbURBLFVBQU1DO0FBQXpELEdBRG9CO0FBQUEsQ0FBdEI7O2tCQUllLGdCQUFNQyxXQUFOLENBQWtCO0FBQUE7QUFDL0JDLGlCQUQrQiw2QkFDWjtBQUNqQixXQUFPO0FBQ0xDLFlBQU0sS0FBS0osS0FBTCxDQUFXSTtBQURaLEtB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QUFKSDtBQURGO0FBNUJKLE9BZkY7QUE2REU7QUFBQTtBQUFBLFVBQUssV0FBVSxPQUFmO0FBQ0U7QUFBQyx1QkFBRDtBQUFBO0FBQ0UscUJBQVMsaUJBQUMzQixDQUFELEVBQU87QUFDZCxrQkFBSSxDQUFDUyxPQUFMLEVBQWM7QUFDZCxvQkFBS1osVUFBTCxDQUFnQlYsT0FBTyxDQUF2QjtBQUNELGFBSkg7QUFLRSxzQkFBVSxDQUFDc0I7QUFMYjtBQU9HLGVBQUsxQixLQUFMLENBQVc2QztBQVBkO0FBREY7QUE3REYsS0FERjtBQTJFRDtBQXhIOEIsQ0FBbEIsQyIsImZpbGUiOiJwYWdpbmF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbi8vXG4vLyBpbXBvcnQgXyBmcm9tICcuL3V0aWxzJ1xuXG5jb25zdCBkZWZhdWx0QnV0dG9uID0gKHByb3BzKSA9PiAoXG4gIDxidXR0b24gdHlwZT0nYnV0dG9uJyB7Li4ucHJvcHN9IGNsYXNzTmFtZT0nLWJ0bic+e3Byb3BzLmNoaWxkcmVufTwvYnV0dG9uPlxuKVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGdldEluaXRpYWxTdGF0ZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2U6IHRoaXMucHJvcHMucGFnZVxuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7cGFnZTogbmV4dFByb3BzLnBhZ2V9KVxuICB9LFxuICBnZXRTYWZlUGFnZSAocGFnZSkge1xuICAgIGlmIChpc05hTihwYWdlKSkge1xuICAgICAgcGFnZSA9IHRoaXMucHJvcHMucGFnZVxuICAgIH1cbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgocGFnZSwgMCksIHRoaXMucHJvcHMucGFnZXMgLSAxKVxuICB9LFxuICBjaGFuZ2VQYWdlIChwYWdlKSB7XG4gICAgcGFnZSA9IHRoaXMuZ2V0U2FmZVBhZ2UocGFnZSlcbiAgICB0aGlzLnNldFN0YXRlKHtwYWdlfSlcbiAgICBpZiAodGhpcy5wcm9wcy5wYWdlICE9PSBwYWdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uUGFnZUNoYW5nZShwYWdlKVxuICAgIH1cbiAgfSxcbiAgYXBwbHlQYWdlIChlKSB7XG4gICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBwYWdlID0gdGhpcy5zdGF0ZS5wYWdlXG4gICAgdGhpcy5jaGFuZ2VQYWdlKHBhZ2UgPT09ICcnID8gdGhpcy5wcm9wcy5wYWdlIDogcGFnZSlcbiAgfSxcbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7XG4gICAgICAvLyBDb21wdXRlZFxuICAgICAgcGFnZXMsXG4gICAgICAvLyBQcm9wc1xuICAgICAgcGFnZSxcbiAgICAgIHNob3dQYWdlU2l6ZU9wdGlvbnMsXG4gICAgICBwYWdlU2l6ZU9wdGlvbnMsXG4gICAgICBwYWdlU2l6ZSxcbiAgICAgIHNob3dQYWdlSnVtcCxcbiAgICAgIGNhblByZXZpb3VzLFxuICAgICAgY2FuTmV4dCxcbiAgICAgIG9uUGFnZVNpemVDaGFuZ2UsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBQcmV2aW91c0NvbXBvbmVudCA9IGRlZmF1bHRCdXR0b24sXG4gICAgICBOZXh0Q29tcG9uZW50ID0gZGVmYXVsdEJ1dHRvblxuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoY2xhc3NOYW1lLCAnLXBhZ2luYXRpb24nKX1cbiAgICAgICAgc3R5bGU9e3RoaXMucHJvcHMucGFnaW5hdGlvblN0eWxlfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nLXByZXZpb3VzJz5cbiAgICAgICAgICA8UHJldmlvdXNDb21wb25lbnRcbiAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghY2FuUHJldmlvdXMpIHJldHVyblxuICAgICAgICAgICAgICB0aGlzLmNoYW5nZVBhZ2UocGFnZSAtIDEpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyFjYW5QcmV2aW91c31cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5wcmV2aW91c1RleHR9XG4gICAgICAgICAgPC9QcmV2aW91c0NvbXBvbmVudD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSctY2VudGVyJz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9Jy1wYWdlSW5mbyc+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5wYWdlVGV4dH0ge3Nob3dQYWdlSnVtcCA/IChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9Jy1wYWdlSnVtcCc+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPXt0aGlzLnN0YXRlLnBhZ2UgPT09ICcnID8gJ3RleHQnIDogJ251bWJlcid9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSB2YWwgLSAxXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoe3BhZ2U6IHZhbH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7cGFnZTogdGhpcy5nZXRTYWZlUGFnZShwYWdlKX0pXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFnZSA9PT0gJycgPyAnJyA6IHRoaXMuc3RhdGUucGFnZSArIDF9XG4gICAgICAgICAgICAgICAgICBvbkJsdXI9e3RoaXMuYXBwbHlQYWdlfVxuICAgICAgICAgICAgICAgICAgb25LZXlQcmVzcz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLndoaWNoID09PSAxMyB8fCBlLmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVBhZ2UoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSctY3VycmVudFBhZ2UnPntwYWdlICsgMX08L3NwYW4+XG4gICAgICAgICAgICApfSB7dGhpcy5wcm9wcy5vZlRleHR9IDxzcGFuIGNsYXNzTmFtZT0nLXRvdGFsUGFnZXMnPntwYWdlc308L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIHtzaG93UGFnZVNpemVPcHRpb25zICYmIChcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc2VsZWN0LXdyYXAgLXBhZ2VTaXplT3B0aW9ucyc+XG4gICAgICAgICAgICAgIDxzZWxlY3RcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IG9uUGFnZVNpemVDaGFuZ2UoTnVtYmVyKGUudGFyZ2V0LnZhbHVlKSl9XG4gICAgICAgICAgICAgICAgdmFsdWU9e3BhZ2VTaXplfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3BhZ2VTaXplT3B0aW9ucy5tYXAoKG9wdGlvbiwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17b3B0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9ufSB7dGhpcy5wcm9wcy5yb3dzVGV4dH1cbiAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nLW5leHQnPlxuICAgICAgICAgIDxOZXh0Q29tcG9uZW50XG4gICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWNhbk5leHQpIHJldHVyblxuICAgICAgICAgICAgICB0aGlzLmNoYW5nZVBhZ2UocGFnZSArIDEpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyFjYW5OZXh0fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLm5leHRUZXh0fVxuICAgICAgICAgIDwvTmV4dENvbXBvbmVudD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0pXG4iXX0=